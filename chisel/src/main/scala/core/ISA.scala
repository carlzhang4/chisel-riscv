package core

import chisel3._
import chisel3.util._


object SrcType {
  def reg = "b0".U
  def pc  = "b1".U
  def imm = "b1".U
  def apply() = UInt(1.W)
}

trait HasInstType{
	def InstN  = "b0000".U
	def InstI  = "b0001".U
	def InstR  = "b0010".U
	def InstS  = "b0011".U
	def InstB  = "b0100".U
	def InstU  = "b0101".U
	def InstJ  = "b0110".U	
}

object FUType{
  def alu = "b000".U
  def lsu = "b001".U
  def bru = "b101".U
  def csr = "b011".U

  def apply() = UInt(3.W)
  def width	  =	3
}


object FUOpType {
	def add  = "b100_00000".U
	def sll  = "b000_00001".U
	def slt  = "b000_00010".U
	def sltu = "b000_00011".U
	def xor  = "b000_00100".U
	def srl  = "b000_00101".U
	def or   = "b000_00110".U
	def and  = "b000_00111".U
	def sub  = "b000_01000".U
	def sra  = "b000_01001".U

	def jal  = "b110_00000".U
	def jalr = "b110_00001".U

	def beq  = "b010_00000".U
	def bne  = "b010_00001".U
	def blt  = "b010_00010".U
	def bge  = "b010_00011".U
	def bltu = "b010_00100".U
	def bgeu = "b010_00101".U

	def jmp		=	"b010_11111".U

	def lui		=	"b000_11111".U

	def nop		=	"b000_00000".U

	//todo
	def lb		=	"b101_00000".U
	def lh		=	"b101_00001".U
	def lw		=	"b101_00010".U
	def ld		=	"b101_00011".U
	def lbu		=	"b101_00100".U
	def lhu		=	"b101_00101".U
	def lwu		=	"b101_00110".U
	def sb		=	"b101_00111".U
	def sh		=	"b101_01000".U
	def sw		=	"b101_01001".U
	def sd		=	"b101_01010".U

	def addw	=	"b111_00000".U
	def subw	=	"b011_00001".U
	def sllw	=	"b011_00010".U
	def srlw	=	"b011_00011".U
	def sraw	=	"b011_00100".U


	

	def apply() = UInt(8.W)
	def width	=	8
	def isAdd(func:UInt) = func(7) //only add return true among arithmatic insts
	def isWordOp(func: UInt) = func(5)&&func(6)
	// def isWordOp(func: UInt) = func(5)
	// def isAdd(func: UInt) = func(6)
	// def pcPlus2(func: UInt) = func(5)
	// def isBru(func: UInt) = func(4)
	// def isBranch(func: UInt) = !func(3)
	// def isJump(func: UInt) = isBru(func) && !isBranch(func)
	// def getBranchType(func: UInt) = func(2, 1)
  	// def isBranchInvert(func: UInt) = func(0)
}

object RV32I_Inst extends HasInstType{
	def LUI		=	BitPat("b????????????????????_?????_0110111")
	def AUIPC	=	BitPat("b????????????????????_?????_0010111")
	def JAL		=	BitPat("b????????????????????_?????_1101111")
	def JALR    =	BitPat("b????????????_?????_000_?????_1100111")

	def BEQ     =	BitPat("b???????_?????_?????_000_?????_1100011")
	def BNE     =	BitPat("b???????_?????_?????_001_?????_1100011")
	def BLT     = 	BitPat("b???????_?????_?????_100_?????_1100011")
  	def BGE     = 	BitPat("b???????_?????_?????_101_?????_1100011")
  	def BLTU    = 	BitPat("b???????_?????_?????_110_?????_1100011")
  	def BGEU    = 	BitPat("b???????_?????_?????_111_?????_1100011")

	def LB      =	BitPat("b????????????_?????_000_?????_0000011")
	def LH      =	BitPat("b????????????_?????_001_?????_0000011")
	def LW      =	BitPat("b????????????_?????_010_?????_0000011")
	def LD      =	BitPat("b????????????_?????_011_?????_0000011")
	def LBU     =	BitPat("b????????????_?????_100_?????_0000011")
	def LHU     =	BitPat("b????????????_?????_101_?????_0000011")
	def LWU     =	BitPat("b????????????_?????_110_?????_0000011")
	def SB      =	BitPat("b???????_?????_?????_000_?????_0100011")
	def SH      =	BitPat("b???????_?????_?????_001_?????_0100011")
	def SW      =	BitPat("b???????_?????_?????_010_?????_0100011")
	def SD      =	BitPat("b???????_?????_?????_011_?????_0100011")

	

	def ADDI	=	BitPat("b????????????_?????_000_?????_0010011") //
	def SLTI 	=	BitPat("b????????????_?????_010_?????_0010011") //
	def SLTIU   = 	BitPat("b????????????_?????_011_?????_0010011") //
	def XORI    = 	BitPat("b????????????_?????_100_?????_0010011") //
	def ORI     = 	BitPat("b????????????_?????_110_?????_0010011") //
	def ANDI    = 	BitPat("b????????????_?????_111_?????_0010011") //
	def SLLI    = 	BitPat("b0000000?????_?????_001_?????_0010011") //
	def SRLI    = 	BitPat("b0000000?????_?????_101_?????_0010011") //
	def SRAI    = 	BitPat("b0100000?????_?????_101_?????_0010011") //

	def ADD     = 	BitPat("b0000000_?????_?????_000_?????_0110011") //
	def SUB     = 	BitPat("b0100000_?????_?????_000_?????_0110011") //
	def SLL     = 	BitPat("b0000000_?????_?????_001_?????_0110011") // 
  	def SLT     = 	BitPat("b0000000_?????_?????_010_?????_0110011") //
	def SLTU    = 	BitPat("b0000000_?????_?????_011_?????_0110011") //
  	def XOR     = 	BitPat("b0000000_?????_?????_100_?????_0110011") //
  	def SRL     = 	BitPat("b0000000_?????_?????_101_?????_0110011") //
  	def SRA     = 	BitPat("b0100000_?????_?????_101_?????_0110011") //
  	def OR      = 	BitPat("b0000000_?????_?????_110_?????_0110011") //
  	def AND     = 	BitPat("b0000000_?????_?????_111_?????_0110011") //

	def ADDIW   =	BitPat("b???????_?????_?????_000_?????_0011011")
	def SLLIW   =	BitPat("b0000000_?????_?????_001_?????_0011011")
	def SRLIW   =	BitPat("b0000000_?????_?????_101_?????_0011011")
	def SRAIW   =	BitPat("b0100000_?????_?????_101_?????_0011011")
	def SLLW    =	BitPat("b0000000_?????_?????_001_?????_0111011")
	def SRLW    =	BitPat("b0000000_?????_?????_101_?????_0111011")
	def SRAW    =	BitPat("b0100000_?????_?????_101_?????_0111011")
	def ADDW    =	BitPat("b0000000_?????_?????_000_?????_0111011")
	def SUBW    =	BitPat("b0100000_?????_?????_000_?????_0111011")
	
	val table = Array(
		LUI        		-> List(InstU, FUType.alu, FUOpType.lui),
		AUIPC      		-> List(InstU, FUType.alu, FUOpType.add),
		JAL        		-> List(InstJ, FUType.alu, FUOpType.jal),
    	JALR       		-> List(InstI, FUType.alu, FUOpType.jalr),

		BEQ				-> List(InstB, FUType.bru, FUOpType.beq),
		BNE				-> List(InstB, FUType.bru, FUOpType.bne),
		BLT				-> List(InstB, FUType.bru, FUOpType.blt),
		BGE				-> List(InstB, FUType.bru, FUOpType.bge),
		BLTU			-> List(InstB, FUType.bru, FUOpType.bltu),
		BGEU			-> List(InstB, FUType.bru, FUOpType.bgeu),

		LB				-> List(InstI, FUType.lsu, FUOpType.lb ),
		LH				-> List(InstI, FUType.lsu, FUOpType.lh ),
		LW				-> List(InstI, FUType.lsu, FUOpType.lw ),
		LD				-> List(InstI, FUType.lsu, FUOpType.ld ),
		LBU				-> List(InstI, FUType.lsu, FUOpType.lbu),
		LHU				-> List(InstI, FUType.lsu, FUOpType.lhu),
		LWU				-> List(InstI, FUType.lsu, FUOpType.lwu),
		SB				-> List(InstS, FUType.lsu, FUOpType.sb ),
		SH				-> List(InstS, FUType.lsu, FUOpType.sh ),
		SW				-> List(InstS, FUType.lsu, FUOpType.sw ),
		SD				-> List(InstS, FUType.lsu, FUOpType.sd ),

		ADDI			-> List(InstI, FUType.alu, FUOpType.add),
		SLTI			-> List(InstI, FUType.alu, FUOpType.slt),
		SLTIU			-> List(InstI, FUType.alu, FUOpType.sltu),
		XORI			-> List(InstI, FUType.alu, FUOpType.xor),
		ORI				-> List(InstI, FUType.alu, FUOpType.or ),
		ANDI			-> List(InstI, FUType.alu, FUOpType.and),
		SLLI			-> List(InstI, FUType.alu, FUOpType.sll),
		SRLI			-> List(InstI, FUType.alu, FUOpType.srl),
		SRAI			-> List(InstI, FUType.alu, FUOpType.sra),

		ADD				-> List(InstR, FUType.alu, FUOpType.add),
		SUB				-> List(InstR, FUType.alu, FUOpType.sub),
		SLL				-> List(InstR, FUType.alu, FUOpType.sll),
		SLT				-> List(InstR, FUType.alu, FUOpType.slt),
		SLTU			-> List(InstR, FUType.alu, FUOpType.sltu),
		XOR				-> List(InstR, FUType.alu, FUOpType.xor),
		SRL				-> List(InstR, FUType.alu, FUOpType.srl),
		SRA				-> List(InstR, FUType.alu, FUOpType.sra),
		OR				-> List(InstR, FUType.alu, FUOpType.or ),
		AND				-> List(InstR, FUType.alu, FUOpType.and),

		ADDIW          -> List(InstI, FUType.alu, FUOpType.addw),
		SLLIW          -> List(InstI, FUType.alu, FUOpType.sllw),
		SRLIW          -> List(InstI, FUType.alu, FUOpType.srlw),
		SRAIW          -> List(InstI, FUType.alu, FUOpType.sraw),
		SLLW           -> List(InstR, FUType.alu, FUOpType.sllw),
		SRLW           -> List(InstR, FUType.alu, FUOpType.srlw),
		SRAW           -> List(InstR, FUType.alu, FUOpType.sraw),
		ADDW           -> List(InstR, FUType.alu, FUOpType.addw),
		SUBW           -> List(InstR, FUType.alu, FUOpType.subw),
	)
}

object Instructions extends HasInstType{
	val DecodeTable		= RV32I_Inst.table

	val DecodeDefault	= List(InstN, FUType.csr, FUOpType.jmp)//todo
}